openapi: "3.0.1"
info:
  title: "Image Labeling API"
  version: "1.0"
  description: "OpenAPI Definition for the Image labeling tool"
paths:
  # Put image in source bucket
  /image/upload:
    post:
      tags:
      - Endpoints
      summary: "Uploads images from the given urls into the source bucket"
      requestBody:
        description: 'Put an image in the source bucket'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
              required:
                - imageUrl
      responses:
        200:
          description: "Object was uploaded sucessfully"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          "Fn::Sub":
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManagerLambda}/invocations"
            - {ManagerLambda: {"Fn::GetAtt": ["ManagerLambda", "Arn"]}}
        passthroughBehavior: "when_no_match"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        httpMethod: "POST"
        type: "aws"
    options:
      tags:
      - CORS
      responses:
        200:
          description: "Default response for CORS method"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        passthroughBehavior: "when_no_match"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 200\n}\n"
        type: "mock"

  # Move image from the sourceBucket to the targetBucket
  /image/label:
    post:
      summary: 'Moves the images from the sourceBucket to the targetBucket'
      tags:
      - Endpoints
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source_key:
                  type: string
                label:
                  type: string
              required:
                - source_key
                - label
      responses:
        200:
          description: "Image was moved succesfully"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          "Fn::Sub":
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManagerLambda}/invocations"
            - {ManagerLambda: {"Fn::GetAtt": ["ManagerLambda", "Arn"]}}
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: "POST"
        timeoutInMillis: 10000
        contentHandling: "CONVERT_TO_TEXT"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        type: "aws"
    options:
      summary: "CORS support"
      tags:
      - CORS
      responses:
        200:
          description: "Default response for CORS method"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        type: "mock"
  # Get list of images to be processed
  /image/list:
    post:
      summary: 'Get list of images still to be processed'
      tags:
      - Endpoints
      responses:
        200:
          description: "List of images still to be labeled"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          "Fn::Sub":
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManagerLambda}/invocations"
            - {ManagerLambda: {"Fn::GetAtt": ["ManagerLambda", "Arn"]}}
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: "POST"
        timeoutInMillis: 10000
        contentHandling: "CONVERT_TO_TEXT"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        type: "aws"
    options:
      summary: "CORS support"
      tags:
      - CORS
      responses:
        200:
          description: "Default response for CORS method"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
        credentials: {"Fn::GetAtt": [ "ApiGatewayIAMRole", "Arn" ]}
        type: "mock"