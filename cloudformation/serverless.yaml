AWSTemplateFormatVersion: '2010-09-09'
Description: Image labeling tool
Parameters:
  FrontendBucketName:
    Description: Name of the S3 bucket used to store the images that have been labeled.
    Type: String
  PrawClientId:
    Type: String
  PrawClientSecret:
    Type: String
  Region:
    Type: String
  SourceBucketName:
    Description: Name of the S3 bucket used to store the images that still need to
      be labeled.
    Type: String
  Stage:
    Type: String
  TargetBucketName:
    Description: Name of the S3 bucket used to store the images that have been labeled.
    Type: String
Resources:
  ApiGateway:
    DependsOn:
    - ManagerLambda
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://serverless-build-artifacts/image-labeling/01a08e5fbbb25a9c43704c567b0e9265
      Name:
        Fn::Sub: ImageLabeling-API-
      StageName:
        Ref: Stage
    Type: AWS::Serverless::Api
  ApiGatewayIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
            - Fn::GetAtt:
              - ManagerLambda
              - Arn
          Version: '2012-10-17'
        PolicyName: LambdaServiceRolePolicy
      RoleName: api.role.imagelabeling
    Type: AWS::IAM::Role
  ManagerLambda:
    Properties:
      CodeUri: s3://serverless-build-artifacts/image-labeling/394b3ae0aa79a9158036072694c0e283
      Description: Lambda that moves the images from the source bucket to the target
        bucket
      Environment:
        Variables:
          SourceBucketName:
            Fn::Sub: ${SourceBucketName}
          TargetBucketName:
            Fn::Sub: ${TargetBucketName}
      FunctionName: ImageLabeling-ManagerLambda
      Handler: function.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ManagerLambdaIAMRole
        - Arn
      Runtime: python3.7
      Timeout: 5
    Type: AWS::Serverless::Function
  ManagerLambdaIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            - s3:Put*
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${SourceBucketName}
            - Fn::Sub: arn:aws:s3:::${SourceBucketName}/*
          - Action:
            - s3:Put*
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${TargetBucketName}
            - Fn::Sub: arn:aws:s3:::${TargetBucketName}/*
          Version: '2012-10-17'
        PolicyName: ManagerRolePolicy
      RoleName: managerlambda.role.imagelabeling
    Type: AWS::IAM::Role
  ScraperLambda:
    Properties:
      CodeUri: s3://serverless-build-artifacts/image-labeling/bf5c3176d260c4535a6959194b9f7053
      Description: Periodically download images from Reddit into the SourceBucket
      Environment:
        Variables:
          API_BASE_URL:
            Fn::Join:
            - ''
            - - https://
              - Ref: ApiGateway
              - Fn::Sub: .execute-api.${Region}.amazonaws.com/${Stage}
          PRAW_CLIENT_ID:
            Fn::Sub: ${PrawClientId}
          PRAW_SECRET:
            Fn::Sub: ${PrawClientSecret}
          TargetBucketName:
            Fn::Sub: ${TargetBucketName}
      FunctionName:
        Fn::Sub: ImageLabeling-ScraperLambda
      Handler: function.process
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - ScraperLambdaIAMRole
        - Arn
      Runtime: python3.7
      Timeout: 20
    Type: AWS::Serverless::Function
  ScraperLambdaIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:Put*
            - s3:List*
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${SourceBucketName}
            - Fn::Sub: arn:aws:s3:::${SourceBucketName}/*
          Version: '2012-10-17'
        PolicyName: ScraperRolePolicy
      RoleName: scraperlambda.role.imagelabeling
    Type: AWS::IAM::Role
  SourceBucket:
    Properties:
      BucketName:
        Fn::Sub: ${SourceBucketName}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          - GET
          AllowedOrigins:
          - '*'
    Type: AWS::S3::Bucket
  TargetBucket:
    Properties:
      BucketName:
        Fn::Sub: ${TargetBucketName}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          AllowedOrigins:
          - '*'
    Type: AWS::S3::Bucket
Transform: AWS::Serverless-2016-10-31
