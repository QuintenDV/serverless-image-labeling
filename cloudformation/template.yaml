AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Image labeling tool

Parameters:
  SourceBucketName:
    Type: String
    Description: Name of the S3 bucket used to store the images that still need to be labeled.
  TargetBucketName:
    Type: String
    Description: Name of the S3 bucket used to store the images that have been labeled.
  FrontendBucketName:
    Type: String
    Description: Name of the S3 bucket used to store the images that have been labeled.
  Stage:
    Type: String
  Region:
    Type: String
  PrawClientId:
    Type: String
  PrawClientSecret:
    Type: String

Resources:
#---------------------------#
#------ IAM Roles
#---------------------------#

  ManagerLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: managerlambda.role.imagelabeling
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyName: ManagerRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Resource:
            - !Sub "arn:aws:s3:::${SourceBucketName}"
            - !Sub "arn:aws:s3:::${SourceBucketName}/*"
            Effect: Allow
          - Action:
            - s3:Put*
            Resource:
            - !Sub "arn:aws:s3:::${TargetBucketName}"
            - !Sub "arn:aws:s3:::${TargetBucketName}/*"
            Effect: Allow

  ScraperLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: scraperlambda.role.imagelabeling
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyName: ScraperRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:Put*
            - s3:List*
            Resource:
            - !Sub "arn:aws:s3:::${SourceBucketName}"
            - !Sub "arn:aws:s3:::${SourceBucketName}/*"
            Effect: Allow

  ApiGatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: api.role.imagelabeling
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      Policies:
        - PolicyName: LambdaServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource:
                - Fn::GetAtt:
                  - ManagerLambda
                  - Arn

#---------------------------#
#------ API GATEWAY
#---------------------------#

  ApiGateway:
    Type: AWS::Serverless::Api
    DependsOn:
      # - ScraperLambda
      - ManagerLambda
    Properties:
      Name: !Sub "ImageLabeling-API"
      StageName: !Ref Stage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml

#---------------------------#
#------ AWS LAMBDA
#---------------------------#

  ManagerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "ImageLabeling-ManagerLambda"
      Handler: function.handler
      Runtime: python3.7
      CodeUri: ../lambdas/manager/target/package.zip
      Description: Lambda that moves the images from the source bucket to the target bucket
      MemorySize: 128
      Timeout: 5
      Role:
        Fn::GetAtt:
          - ManagerLambdaIAMRole
          - Arn
      Environment:
        Variables:
          SourceBucketName: !Sub "${SourceBucketName}"
          TargetBucketName: !Sub "${TargetBucketName}"

  ScraperLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ImageLabeling-ScraperLambda"
      Handler: function.process
      Runtime: python3.7
      CodeUri: ../lambdas/scraper/target/package.zip
      Description: Periodically download images from Reddit into the SourceBucket
      MemorySize: 256
      Timeout: 20
      Role:
        Fn::GetAtt:
          - ScraperLambdaIAMRole
          - Arn
      Environment:
        Variables:
          TargetBucketName: !Sub "${TargetBucketName}"
          PRAW_CLIENT_ID: !Sub "${PrawClientId}"
          PRAW_SECRET: !Sub "${PrawClientSecret}"
          API_BASE_URL:
            Fn::Join:
              - ""
              - - "https://"
                - Ref: ApiGateway
                - !Sub ".execute-api.${Region}.amazonaws.com/${Stage}"

#---------------------------#
#------ S3 BUCKETS
#---------------------------#

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${SourceBucketName}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - PUT
              - GET
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${TargetBucketName}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - PUT
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${FrontendBucketName}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"

#---------------------------#
#------ Lambda schedule
#---------------------------#

# Schedule the lambda to run every 24 hours
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Call Scraper lamdda every 24 hours"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "ScraperLambda"
              - "Arn"
          Id: "ScraperLambdaScheduleID"
          Input: >
            {
              "subreddits": [
                "aww",
                "eyebleach"
              ],
              "number": 50
            }

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "ScraperLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"